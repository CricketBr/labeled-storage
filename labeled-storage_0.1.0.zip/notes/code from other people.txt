if mods["nullius"] then -- to see if mod installed


++++
-- useful functions within a mod, so don't need to repeat personal prefixes

local function config(name)
  return settings.startup['er:hcg-'..name].value
  end

--And these two make defining common file paths much shorter.
local function sprite(name)
  return '__eradicators-hand-crank-generator__/sprite/'..name
  end
  
local function sound(name)
  return '__eradicators-hand-crank-generator__/sound/'..name
  end






++++
NULLIUS
in prototypes/inputs.lua, called by data.lua




data:extend({
  {
    type = "custom-input",
    name = "nullius-prioritize",
    order = "nullius-ibb",
    key_sequence = "PAD +",
	include_selected_prototype = true
  },
  {
    type = "custom-input",
    name = "nullius-mirror",
    order = "nullius-ibc",
    key_sequence = "PAD *",
	include_selected_prototype = true
  },
  
  
 ++++
 AFH / PIPING
 in prototypes/controls.lua (yes, controlS) called by data.lua
 
 data:extend{
    {
        type = "custom-input",
        name = "rotate-underground-pipe",
        key_sequence = "CONTROL + R",
        consuming = "none"
    },
    {
	
++++
HAND CRANK GENERATOR
in data.lua
data:extend({


  -- This is the hotkey that will later be used to "crank" the generator.
  {
    type                = 'custom-input'    ,
    name                = 'er:hcg-crank-key',
    
    -- I "link" this hotkey to a vanilla hotkey, so that
    -- the player does not have to remember an extra hotkey.
    -- Linked hotkeys must define an empty key_sequence.
    linked_game_control = 'rotate'          ,
    key_sequence        = ''                ,
    
    -- Here I could block other mods or even vanilla from
    -- using the same hotkey, but as i'm linking to another
    -- hotkey i'm not doing that. Assigning "nil" in lua
    -- deletes the value, so this line has the same effect as
    -- writing nothing at all.
    consuming           =  nil              , 

    -- Properties that have a known default value do not have to be
    -- specified. The engine will automatically assign the
    -- default value at the end of the data stage automatically.

    -- For reference these are the possible values for "consuming":

    -- 'none'       : Default if not defined.
    -- 'game-only'  : The opposite of script-only. Blocks game inputs using the
    --                same key sequence but lets other custom inputs using the
    --                same key sequence fire.
    },
  
  

in control.lua

script.on_event('er:hcg-crank-key',function(e)
  local p = game.players[e.player_index]
  local selected_entity = p.selected
  if selected_entity and (selected_entity.name == 'er:hcg-entity') then
    if not p.force.technologies['er:hcg-technology'].researched then
      try_to_crank(e.tick,p,selected_entity)
    else
      -- If the players team ("force") has researched the technology
      -- then instead of manual cranking the ADVANCED auto-cranker is
      -- started.
      add_auto_cranker(p,selected_entity)
      end
    end
  end)
  
  +++
  https://lua-api.factorio.com/latest/events.html#CustomInputEvent
  (yes, the brackets match, passing actual code - interesting option, but just confuses jr modders)
  script.on_event("my-potato-control", function(event)
  game.print("Keyboard shortcut pressed on tick: " ..tostring(event.tick))
end)


+++++

Going with Nullius:
search for turbine, mirror, 


    type = "custom-input",
    name = "nullius-mirror",
	
	type = "custom-input",
    name = "nullius-prioritize",
	
	
...

data.lua
require('prototypes.(entity, item, etc)')
require('prototypes.inputs')

control.lua
util = require("util")  -- util is from factorio-data/core/lualib/util.lua ; is it really necessary to require it?
require("scripts.mirror")
require("scripts.turbine")
require("scripts.build")





function cb.ls.flib_create_icons(prototype, new_layers)
-- looks like it returns the new icons, doesn't change the old one, doesn't remove icon

--- FROM flib, copied blindly
---- looks like they trust new_layers to be complete
--- Copies prototype.icon/icons to a new fully defined icons array, optionally adding new icon layers.
--- Returns `nil` if the prototype's icons are incorrectly or incompletely defined.

--- Looks like it doesn't erase icon. I guess icons wins over icon?

  if new_layers then
    for _, new_layer in pairs(new_layers) do
      if not new_layer.icon or not new_layer.icon_size then
        return nil
      end
    end
  end


  if prototype.icons then
    local icons = {}
    for _, v in pairs(prototype.icons) do
      -- Over define as much as possible to minimize weirdness: https://forums.factorio.com/viewtopic.php?f=25&t=81980
      icons[#icons + 1] = {
        icon = v.icon,
        icon_size = v.icon_size or prototype.icon_size or 32,
        icon_mipmaps = v.icon_mipmaps or prototype.icon_mipmaps or 0,
        tint = v.tint,
        scale = v.scale or 1,
        shift = v.shift,
      }
    end
    if new_layers then
      for _, new_layer in pairs(new_layers) do
        icons[#icons + 1] = new_layer
      end
    end
    return icons
  elseif prototype.icon then
    local icons = {
      {
        icon = prototype.icon,
        icon_size = prototype.icon_size,
        icon_mipmaps = prototype.icon_mipmaps,
        tint = { r = 1, g = 1, b = 1, a = 1 },
      },
    }
    if new_layers then
      for _, new_layer in pairs(new_layers) do
        icons[#icons + 1] = new_layer
      end
    end
    return icons
  else
    return nil
  end
end


